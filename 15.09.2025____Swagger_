STEP-1
========

We need to add below parameters in pom.xml to work with SWAGGER instead of using POSTMAN
---------------------------------------------------------------------
<dependency>
    <groupId>org.springdoc</groupId>
    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    <version>2.5.0</version>
</dependency>
-------------------------------------------------------------------

Note: To access SWAGGER url, we need to disable CSRF.
In order to access SWAGGER in the browser, firstly disable CSRF. why ?
Those url's which you access through client like postman, angular, swaggar will not work.

this should be disable in testing phase, but production phase no need to disable.

=========================================================================================

To Access Swagger - Run the Project

http://localhost:8080/swagger-ui.html

Or (sometimes):

http://localhost:8080/swagger-ui/index.html

=================================================================================


coding part
=================

/src/main/java
 com.authserviceex1
   
   Authserviceex1Application.java
   ==============================

package com.authserviceex1;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Authserviceex1Application {

	public static void main(String[] args) {
		SpringApplication.run(Authserviceex1Application.class, args);
	}

}

/src/main/java
  com.authserviceex1.config

  AppSecurityConfig.java
  ======================
package com.authserviceex1.config;

//import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;


@Configuration
@EnableWebSecurity

public class AppSecurityConfig {

//	@Autowired
//	private PasswordEncoder en;
//	
//	@Bean
//	public PasswordEncoder encode() {
//		
//		return new BCryptPasswordEncoder();
//	}
	
	@Bean
	public PasswordEncoder getEncoder() {
		
		return new BCryptPasswordEncoder();
	}
	
	
	@Bean
	public SecurityFilterChain securityConfig(HttpSecurity http) throws Exception {
	    http
	        .csrf(csrf -> csrf.disable())  // Disable CSRF
	        .authorizeHttpRequests(auth -> 
	            auth.requestMatchers(
	            		"/api/v1/auth/register/", 
	            		"/v3/api-docs/**",
	                    "/swagger-ui/**",
	                    "/swagger-ui.html",
	                    "/swagger-resources/**",
	                    "/webjars/**").permitAll()
	            .anyRequest().authenticated()
	        );

		return http.build();
		
	}
	
}

/src/main/java
com.authserviceex1.controller

   AuthController.java
   ===================
package com.authserviceex1.controller;


import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.authserviceex1.dto.UserDto;
import com.authserviceex1.entity.APIResponse;
import com.authserviceex1.service.AuthService;

@RestController
@RequestMapping("/api/v1/auth")
public class AuthController {
 
	@Autowired
	private AuthService authService;
	
	
	public AuthController(AuthService authService) {
		super();
		this.authService = authService;
	}


	//http://localhost:8080/api/v1/auth/register/
	
	@PostMapping("/register/")
	public ResponseEntity<APIResponse <String>> registerUser(UserDto userDto){
	
		
		APIResponse<String> response = authService.register(userDto);
		//return new ResponseEntity<>(response, HttpStatus.CREATED);
		
		
		//return status dynamically based on response.getStatus()
		
		return ResponseEntity.status(response.getStatus()).body(response);
	}
	
	
}


WelcomeController.java
=======================

package com.authserviceex1.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/v1/welcome")
public class WelcomeController {

	
	//http://localhost:8080/api/v1/welcome/hello
	@GetMapping("/hello")
	public String hello() {
		return "hello";
	}
	
	
	//http://localhost:8080/api/v1/welcome/hi
	@GetMapping("/hi")
	public String hi() {
		return "hi";
	}
}


/src/main/java
com.authserviceex1.dto

UserDto.java
============

package com.authserviceex1.dto;

public class UserDto {
	
	
private long id;
	
	private String name;
	
	private String username;
	
	private String email;
	
	private String password;

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}


}


/src/main/java
com.authserviceex1.entity

APIResponse<T>.java
====================
package com.authserviceex1.entity;

public class APIResponse<T> {
	
	private String message;
	private int status;
	private T data;
	
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	public int getStatus() {
		return status;
	}
	public void setStatus(int status) {
		this.status = status;
	}
	public T getData() {
		return data;
	}
	public void setData(T data) {
		this.data = data;
	}
}

User.java
=========
package com.authserviceex1.entity;

import jakarta.persistence.*;

@Entity
@Table(name="user")

public class User {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column(name="name", nullable = false)
	private String name;
	
	@Column(name="username", nullable = false, unique = true)
	private String username;
	
	@Column(name="email", nullable = false, unique = true)
	private String email;
	
	@Column(name = "password")
	private String password;

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}	
}
=====================================================

/src/main/java
com.authserviceex1.repository

UserRepository.java                 Note: It's an interface
===================

package com.authserviceex1.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.authserviceex1.entity.User;



public interface UserRepository extends JpaRepository<User, Long>{
	
	
	User findByUsername(String username);
	User findByEmail(String email);
	boolean existsByUsername(String username); // this method i use to check whether user exist or not, if user is present with the same name then it will prompt with user exist  
	boolean existsByEmail(String email); // similar way as per first one.

}
======================

/src/main/java

com.authserviceex1.service

AuthService.java
================

package com.authserviceex1.service;

import org.springframework.beans.BeanUtils;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.authserviceex1.dto.UserDto;
import com.authserviceex1.entity.APIResponse;
import com.authserviceex1.entity.User;
import com.authserviceex1.repository.UserRepository;

@Service
public class AuthService {

private UserRepository userRepository;
private PasswordEncoder passwordEncoder;

public AuthService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
	
	this.userRepository=userRepository;
	this.passwordEncoder=passwordEncoder;
}

public APIResponse<String> register(UserDto dto){
	
	if(userRepository.existsByUsername(dto.getUsername())) {
		
		APIResponse<String> response =new APIResponse<>();
		response.setMessage("Registation failed");
		response.setStatus(500);
		response.setData("User with username exists");
		return response;
	
	
	}
	
if(userRepository.existsByEmail(dto.getEmail())) {
		
		APIResponse<String> response =new APIResponse<>();
		response.setMessage("Registation failed");
		response.setStatus(500);
		response.setData("User with username exists");
		return response;
	
        }
		
		User user = new User();
		BeanUtils.copyProperties(dto, user);
		
		user.setPassword(passwordEncoder.encode(dto.getPassword()));
		
		userRepository.save(user);
		
		
		APIResponse<String> response = new APIResponse<>();
		response.setMessage("Registration Done");
		response.setStatus(201);
		response.setData("User is registered");
		
		return response;

   }
}
=============================================================================


/src/main/resources


application.properties
======================

spring.application.name=authserviceex1
spring.datasource.url=jdbc:mysql://localhost:3306/securitydb
spring.datasource.username=root
spring.datasource.password=test

spring.jpa.hibernate.ddl-auto=update

===================================================================================
src/test/java

Authserviceex1ApplicationTests.java
===================================

package com.authserviceex1;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class Authserviceex1ApplicationTests {

	@Test
	void contextLoads() {
	}

}

================================================================================


additionally this is your pom.xml file 
======================================


<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.authserviceex1</groupId>
	<artifactId>authserviceex1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>authserviceex1</name>
	<description>security features</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
	  <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
      </dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		
				<dependency>
		    <groupId>org.springdoc</groupId>
		    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
		    <version>2.5.0</version>
		</dependency>

		
		
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>


