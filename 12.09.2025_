Now the task is 
url should be accessable by all (open url for all users ) ---> //http://localhost:8080/api/v1/welcome/hello
but this url requires authentication  -->   //http://localhost:8080/api/v1/welcome/hi

any url apart of //http://localhost:8080/api/v1/welcome/hello  should be authenticated

AppSecurityConfig.java
======================
package com.authserviceex1.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class AppSecurityConfig {
	
  @Bean
	public SecurityFilterChain securityConfig(HttpSecurity http) throws Exception {
		
		http.authorizeHttpRequests(
				
				req->{
					
					req.requestMatchers("/api/v1/welcome/hello").permitAll()
					.anyRequest().authenticated();	
				}
				
				);
		return http.build();
		
	}	
	
}

WelcomeController.java
======================
package com.authserviceex1.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/v1/welcome")
public class WelcomeController {

	
	//http://localhost:8080/api/v1/welcome/hello
	@GetMapping("/hello")
	public String hello() {
		return "hello";
	}
	
	
	//http://localhost:8080/api/v1/welcome/hi
	@GetMapping("/hi")
	public String hi() {
		return "hi";
	}
}
======================================================
Authservicesex1Application.java
==============================
package com.authserviceex1;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Authserviceex1Application {

	public static void main(String[] args) {
		SpringApplication.run(Authserviceex1Application.class, args);
	}

}
==============================================================

when we clicked on other websites we will get 403 error because we do not have permissions.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++







Next Task
==========

Note:
=====
DTO is replical of entity class.


Create User Registration Implementation
========================================

src/main/java
 com.authserviceex1

A.java
=======
package com.authserviceex1;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
public class A {

	public static void main(String[] args) {
		
		
		String pwd = "testing";
		PasswordEncoder en= new BCryptPasswordEncoder();
		System.out.println(en.encode(pwd));
		
	}
	
}

Authserviceex1Application.java
===============================
package com.authserviceex1;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Authserviceex1Application {

	public static void main(String[] args) {
		SpringApplication.run(Authserviceex1Application.class, args);
	}

}


src/main/java
=====================
com.authserviceex1.config
=========================

AppSecurityConfig.java
======================
package com.authserviceex1.config;

//import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;


@Configuration
@EnableWebSecurity

public class AppSecurityConfig {

//	@Autowired
//	private PasswordEncoder en;
//	
//	@Bean
//	public PasswordEncoder encode() {
//		
//		return new BCryptPasswordEncoder();
//	}
	
	@Bean
	public PasswordEncoder getEncoder() {
		
		return new BCryptPasswordEncoder();
	}
	
	
	@Bean
	public SecurityFilterChain securityConfig(HttpSecurity http) throws Exception {
		
		http.authorizeHttpRequests(
				
				req->{
					
					req.requestMatchers("/api/v1/welcome/hello").permitAll()
					.anyRequest().authenticated();	
				}
				
				);
		return http.build();
		
	}
	
	
	
}
=============================

src/main/java
  com.authserviceex1.controller

  AuthController.java
  ===================
  package com.authserviceex1.controller;

public class AuthController {

}

WelcomeController.java
======================
package com.authserviceex1.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/v1/welcome")
public class WelcomeController {

	
	//http://localhost:8080/api/v1/welcome/hello
	@GetMapping("/hello")
	public String hello() {
		return "hello";
	}
	
	
	//http://localhost:8080/api/v1/welcome/hi
	@GetMapping("/hi")
	public String hi() {
		return "hi";
	}
}

====================================================

src/main/java
  com.authserviceex1.dto
  
  UserDto.java
  =============

  package com.authserviceex1.dto;

public class UserDto {
	
	
private long id;
	
	private String name;
	
	private String username;
	
	private String email;
	
	private String password;

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}


}

====================================================

src/main/java
  com.authserviceex1.entity
  
  APIResponse<T>.java
  ====================
package com.authserviceex1.entity;

public class APIResponse<T> {
	
	private String message;
	private int status;
	private T data;
	
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	public int getStatus() {
		return status;
	}
	public void setStatus(int status) {
		this.status = status;
	}
	public T getData() {
		return data;
	}
	public void setData(T data) {
		this.data = data;
	}

}

User.java
==========

package com.authserviceex1.entity;

import jakarta.persistence.*;

@Entity
@Table(name="user")

public class User {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column(name="name", nullable = false)
	private String name;
	
	@Column(name="username", nullable = false, unique = true)
	private String username;
	
	@Column(name="email", nullable = false, unique = true)
	private String email;
	
	@Column(name = "password")
	private String password;

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}	
	
}

============================================
src/main/java
   com.authserviceex1.repository
   UserRepository.java      Note: It is an interface
   ====================
package com.authserviceex1.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.authserviceex1.entity.User;

public interface UserRepository extends JpaRepository<User, Long>{
	
	User findByUsername(String username);
	User findByEmail(String email);
	boolean existsByUsername(String username); // this method i use to check whether user exist or not, if user is present with the same name then it will prompt with user exist  
	boolean existsByEmail(String email); // similar way as per first one.

}
======================================================================================
/src/main/java
  com.authserviceex1.service
  
  AuthService.java
  ================

  package com.authserviceex1.service;

import org.springframework.beans.BeanUtils;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.authserviceex1.dto.UserDto;
import com.authserviceex1.entity.APIResponse;
import com.authserviceex1.entity.User;
import com.authserviceex1.repository.UserRepository;

@Service
public class AuthService {

private UserRepository userRepository;
private PasswordEncoder passwordEncoder;

public AuthService(UserRepository userrepository, PasswordEncoder passwordEncoder) {
	
	this.userRepository=userRepository;
	this.passwordEncoder=passwordEncoder;
}

public AuthService(UserRepository userrepository) {
	this.userRepository = userrepository;
 }

public APIResponse<String> register(UserDto dto){
	
	if(userRepository.existsByUsername(dto.getUsername())) {
		
		APIResponse<String> response =new APIResponse<>();
		response.setMessage("Registation failed");
		response.setStatus(500);
		response.setData("User with username exists");
		return response;
	
	
	}
	
if(userRepository.existsByEmail(dto.getEmail())) {
		
		APIResponse<String> response =new APIResponse<>();
		response.setMessage("Registation failed");
		response.setStatus(500);
		response.setData("User with username exists");
		return response;
	
        }
		
		User user = new User();
		BeanUtils.copyProperties(dto, user);
		
		user.setPassword(passwordEncoder.encode(dto.getPassword()));
		
		userRepository.save(user);
		
		
		APIResponse<String> response = new APIResponse<>();
		response.setMessage("Registration Done");
		response.setStatus(201);
		response.setData("User is registered");
		
		return response;

   }
}

=============================================================================================================================================

application.properties
=======================
spring.application.name=authserviceex1


spring.datasource.url=jdbc:mysql://localhost:3306/securitydb

spring.datasource.username=root
spring.datasource.password=test


 spring.jpa.hibernate.ddl-auto=update




=================UPTO THIS WE HAVE DONE ==============NEXT CLASS WILL CONTINUE FURTHER ==================



